clear; clc;

% --- --- --- --- --- --- --- --- --- --- --- --- ---
% Because separateMatrix has been somewhat filtered in 
% Advance and the filtration has been tested in the 
% advance file development, only different types of 
% valid and maybe some invalid matrix will be test here.
% --- --- --- --- --- --- --- --- --- --- --- --- ---

% -= Variable =-
nameList = ["John" "Cindy" "Mike" "Ken" "Luke" "Rick" "Hans" "Tom" "Ian"];

% -= Test Functionality =- (Normal Valid Input)
groupTable = string(zeros(3, 3));
separateMatrix = ["Ian" "Hans"];
fprintf(['Parameter: (string(zeros(3, 3)), ' ...
    '["John" "Cindy" "Mike" "Ken" "Luke" "Rick" "Hans" "Tom" "Ian"], ' ...
    '["Ian" "Hans"])\n']);
fprintf(['Expected Output: A 3x3 matrix:\n\t' ...
    '- Everyone in the nameList is in the matrix\n\t' ...
    '- "Ian" is in a different column from "Hans"\n\t' ...
    '- Each person must only appear once in the matrix\n\t' ...
    '- The location each name is added is random each time\n']);
disp("Actual Output:");
groupTable = separate(groupTable, nameList, separateMatrix);
disp(groupTable);


% -= Test Case 1 =- (Repeated Name in Separate Teams) 
groupTable = string(zeros(3, 3));
separateMatrix = ["Ian" "Hans"; "Ken" "Luke"];
separateMatrix(2, 3) = "Ian";
fprintf(['Parameter: (string(zeros(3, 3)), ' ...
    '["John" "Cindy" "Mike" "Ken" "Luke" "Rick" "Hans" "Tom" "Ian"], \n' ...
    '["Ian" "Hans" <missing>; "Ken" "Luke" "Ian"])\n']);
fprintf(['Expected Output: A 3x3 matrix:\n\t' ...
    '- Everyone in the nameList is in the matrix\n\t' ...
    '- "Ian" is in a different column from "Hans", "Ken" & "Luke"\n\t' ...
    '- "Ken" & "Luke" are in different columns\n\t' ...
    '- "Hans" could be in the same group as either "Ken" or "Luke"\n\t' ...
    '- Each person must only appear once in the matrix\n\t' ...
    '- The location each name is added is random each time\n']);
disp("Actual Output:");
groupTable = separate(groupTable, nameList, separateMatrix);
disp(groupTable);