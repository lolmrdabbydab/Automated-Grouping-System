clear; clc;

% --- --- --- --- --- --- --- --- --- --- --- --- ---
% Because separateMatrix has been somewhat filtered in 
% Advance and the filtration has been tested in the 
% advance file development, only different types of 
% valid and maybe some invalid matrix will be test here.
% --- --- --- --- --- --- --- --- --- --- --- --- ---

% -= Variable =-
nameList = ["John" "Cindy" "Mike" "Ken" "Luke" "Rick" "Hans" "Tom" "Ian"];

% -= Test Case 1 =- (1 Separate Team)
groupTable = string(zeros(3, 3));
separateMatrix = ["Ian" "Hans"];
fprintf(['Parameter: (string(zeros(3, 3)), ' ...
    '["John" "Cindy" "Mike" "Ken" "Luke" "Rick" "Hans" "Tom" "Ian"], ' ...
    '["Ian" "Hans"])\n']);
fprintf(['Expected Output: A 3x3 matrix of 0s where:\n\t' ...
    '- "Ian" & "Hans" are the only two non-zero elements\n\t' ...
    '- They are in different columns\n\t' ...
    '- The location each name is added is random each time\n']);
disp("Actual Output:");
groupTable = separate1(groupTable, nameList, separateMatrix);
disp(groupTable);

% -= Test Case 2 =- (>1 Separate Team)
groupTable = string(zeros(3, 3));
separateMatrix = ["Ian" "Hans"; "Ken" "Luke"];
fprintf(['Parameter: (string(zeros(3, 3)), ' ...
    '["John" "Cindy" "Mike" "Ken" "Luke" "Rick" "Hans" "Tom" "Ian"], ' ...
    '["Ian" "Hans"; "Ken" "Luke"])\n']);
fprintf(['Expected Output: A 3x3 matrix of 0s where:\n\t' ...
    '- "Ian", "Hans", "Ken" & "Luke" are the only four non-zero elements\n\t' ...
    '- "Ian" & "Hans" are in different columns\n\t' ...
    '- "Ken" & "Luke" are in different columns\n\t' ...
    '- Either one in each pairs can be in the same group.\n\t' ...
    '- The location each name is added is random each time\n']);
disp("Actual Output:");
groupTable = separate1(groupTable, nameList, separateMatrix);
disp(groupTable);

% -= Test Case 3 =- (Different Length Separate Team)
groupTable = string(zeros(3, 3));
separateMatrix = ["Ian" "Hans"; "Ken" "Luke"];
separateMatrix(2, 3) = "Rick";
fprintf(['Parameter: (string(zeros(3, 3)), ' ...
    '["John" "Cindy" "Mike" "Ken" "Luke" "Rick" "Hans" "Tom" "Ian"], \n' ...
    '["Ian" "Hans" <missing>; "Ken" "Luke" "Rick"])\n']);
fprintf(['Expected Output: A 3x3 matrix of 0s where:\n\t' ...
    '- "Ian", "Hans", "Ken", "Luke" & "Rick" are the only five non-zero elements\n\t' ...
    '- "Ian" & "Hans" are in different columns\n\t' ...
    '- "Ken", "Luke" & "Rick" are in different columns\n\t' ...
    '- Either any one member of each separate team (row) can be in the same group\n\t' ...
    '- The location each name is added is random each time\n']);
disp("Actual Output:");
groupTable = separate1(groupTable, nameList, separateMatrix);
disp(groupTable);

% -= Test Case 4 =- (Repeated Name in Separate Teams) 
    % -> Test Failed (Repeated Name Added Error)
groupTable = string(zeros(3, 3));
separateMatrix = ["Ian" "Hans"; "Ken" "Luke"];
separateMatrix(2, 3) = "Ian";
fprintf(['Parameter: (string(zeros(3, 3)), ' ...
    '["John" "Cindy" "Mike" "Ken" "Luke" "Rick" "Hans" "Tom" "Ian"], \n' ...
    '["Ian" "Hans" <missing>; "Ken" "Luke" "Ian"])\n']);
fprintf(['Expected Output: A 3x3 matrix of 0s where:\n\t' ...
    '- "Ian", "Hans", "Ken" & "Luke" are the only four non-zero elements\n\t' ...
    '- "Ian" is in a different column from "Hans", "Ken" & "Luke"\n\t' ...
    '- "Ken" & "Luke" are in different columns\n\t' ...
    '- "Hans" could be in the same group as either "Ken" or "Luke"\n\t' ...
    '- Each person must only appear once in the matrix\n\t' ...
    '- The location each name is added is random each time\n']);
disp("Actual Output:");
groupTable = separate1(groupTable, nameList, separateMatrix);
disp(groupTable);

% -= Test Case 5 =- (Team That Can't Be Separated - Warning Testing) 
    % -> Test Successful But Logic Failed Due to Test Case 4 Failure
groupTable = string(zeros(3, 3));
separateMatrix = ["Ian" "Hans"; "Hans" "Luke"; "Ian" "Luke"];
separateMatrix([2, 3], 3) = "Mike";
fprintf(['Parameter: (string(zeros(3, 3)), ' ...
    '["John" "Cindy" "Mike" "Ken" "Luke" "Rick" "Hans" "Tom" "Ian"], \n' ...
    '["Ian" "Hans" <missing>; "Hans" "Luke" "Mike"; "Ian" "Luke" "Mike"])\n']);
fprintf(['Expected Output: A 3x3 matrix of 0s where:\n\t' ...
    '- "Ian", "Hans", "Luke" & "Mike" are the only four non-zero elements\n\t' ...
    '- "Ian" & "Hans" are in different columns\n\t' ...
    '- "Hans", "Luke" & "Mike" are in different columns\n\t' ...
    '- Error message saying Unable to separate "Luke" from "Ian" & "Mike"\n\t' ...
    '- "Ian" could be in the same team with either "Mike" or "Luke"\n\t' ...
    '- Each person must only appear once in the matrix\n\t' ...
    '- The location each name is added is random each time\n']);
disp("Actual Output:");
groupTable = separate1(groupTable, nameList, separateMatrix);
disp(groupTable);