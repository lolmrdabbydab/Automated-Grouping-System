clear; clc;

% --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
% Due to combineMatrix & separateMatrix will never be empty
% which filtered in advance() and the input filtration has been 
% tested in the advance file development, only different types of 
% valid input will be test here.
% --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---

% -= Variable =-
nameList = ["John" "Cindy" "Mike" "Ken" "Luke" "Rick" "Hans" "Tom" "Ian"];

% -= Test Case 1 =- (1 Combine Team & 1 Separate Team)
groupTable = string(zeros(3, 3));
combineMatrix = ["John" "Cindy"];
separateMatrix = ["Ian" "Hans"];
fprintf(['Parameter: (string(zeros(3, 3)), ' ...
    '["John" "Cindy" "Mike" "Ken" "Luke" "Rick" "Hans" "Tom" "Ian"], ' ...
    '["John" "Cindy"], ' ...
    '["Ian" "Hans"])\n']);
fprintf(['Expected Output: A 3x3 matrix where:\n\t' ...
    '- Everyone in the nameList is in the matrix once\n\t' ...
    '- "John" & "Cindy" are in the 1st column starting from the 1st row\n\t' ...
    '- "Ian" & "Hans" are in different columns\n\t' ...
    '- Everyone not on the combineMatrix/separateMatrix is randomly added into the matrix\n']);
disp("Actual Output:");
groupTable = comANDSep(groupTable, nameList, combineMatrix, separateMatrix);
disp(groupTable);


% -= Test Case 2 =- (Multiple Combine Team & Multiple Separate Team)
groupTable = string(zeros(3, 3));
combineMatrix = ["John" "Cindy"; "Tom" "Ian"];
separateMatrix = ["Ian" "Hans"; "Cindy" "Ian"];
fprintf(['Parameter: (string(zeros(3, 3)), ' ...
    '["John" "Cindy" "Mike" "Ken" "Luke" "Rick" "Hans" "Tom" "Ian"], ' ...
    '["John" "Cindy"; "Tom" "Ian"], ' ...
    '["Ian" "Hans"; "Cindy" "Ian"])\n']);
fprintf(['Expected Output: A 3x3 matrix of 0s where:\n\t' ...
    '- Everyone in the nameList is in the matrix once\n\t' ...
    '- "John" & "Cindy" are in the 1st column starting from the 1st row\n\t' ...
    '- "Tom" & "Ian" is added to a random column that is not the column "John" & "Cindy" are in\n\t' ...
    '- "Hans" could be in any column that does not have the pair "Ian" & "Tom"\n\t' ...
    '- Everyone not on the combineMatrix/separateMatrix is randomly added into the matrix\n']);
disp("Actual Output:");
groupTable = comANDSep(groupTable, nameList, combineMatrix, separateMatrix);
disp(groupTable);


% -= Test Case 3 =- (Different Length Combine Team & Separate Team)
groupTable = string(zeros(3, 3));
combineMatrix = ["John" "Cindy"; "Tom" "Ian"];
separateMatrix = ["Ian" "Hans" "Luke"];
fprintf(['Parameter: (string(zeros(3, 3)), ' ...
    '["John" "Cindy" "Mike" "Ken" "Luke" "Rick" "Hans" "Tom" "Ian"], ' ...
    '["John" "Cindy"; "Tom" "Ian"], ' ...
    '["Ian" "Hans" "Luke"])\n']);
fprintf(['Expected Output: A 3x3 matrix of 0s where:\n\t' ...
    '- Everyone in the nameList is in the matrix once\n\t' ...
    '- "John" & "Cindy" are in the 1st column starting from the 1st row\n\t' ...
    '- "Tom" & "Ian" is added to a random column that is not the column "John" & "Cindy" are in\n\t' ...
    '- "Hans", "Ian" & "Luke" can be in any column that does not have one another in it\n\t' ...
    '- Everyone not on the combineMatrix/separateMatrix is randomly added into the matrix\n']);
disp("Actual Output:");
groupTable = comANDSep(groupTable, nameList, combineMatrix, separateMatrix);
disp(groupTable);

% -= Test Case 4 =- (Combine Team Leaving No Room For Separate Team)
groupTable = string(zeros(3, 3));
combineMatrix = ["John" "Cindy"; "Tom" "Ian"; "Rick" "Hans"];
combineMatrix(2, 3) = "Ken";
combineMatrix(3, 3) = "Luke";
separateMatrix = ["John" "Mike"];
fprintf(['Parameter: (string(zeros(3, 3)), ' ...
    '["John" "Cindy" "Mike" "Ken" "Luke" "Rick" "Hans" "Tom" "Ian"], ' ...
    '["John" "Cindy" <missing>; "Tom" "Ian" "Ken"; "Rick" "Hans" "Luke"], ' ...
    '["John" "Mike"])\n']);
fprintf(['Expected Output: A 3x3 matrix of 0s where:\n\t' ...
    '- Everyone in the nameList is in the matrix once\n\t' ...
    '- "John" & "Cindy" are in the 1st column starting from the 1st row\n\t' ...
    '- The column each Combine Team (except the first) is added to is random each time\n\t' ...
    '- No Combine Team is in the same column with one another\n\t' ...
    '- Error Message saying cannot separate "Mike" from "John"\n\t' ...
    '- "Mike" is added to the same column as "John" & "Cindy"\n']);
disp("Actual Output:");
groupTable = comANDSep(groupTable, nameList, combineMatrix, separateMatrix);
disp(groupTable);