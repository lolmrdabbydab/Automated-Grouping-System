clear; clc;

% Because Matrix will never be empty and the function joinRandomGroup won't
% be call if the List is empty, we don't test for those cases.

% -= Test Functionality =- (Non-empty Matrix & List)
groupCanJoin = [1 3 4];
groupTable = ["Name 1" "Name 2" "0" "0";
    "Name 3" "0" "0" "Name 4";
    "Name 5" "Name 7" "0" "Name 6";
    "0" "0" "0" "0"];

fprintf(['Input: \n\t' ...
    '- groupCanJoin: [1 3]\n\t' ...
    '- groupTable: ["Name 1" "Name 2" "0" "0"; ' ...
    '"Name 3" "0" "0" "Name 4"; ' ...
    '"Name 5" "Name 7" "0" "Name 6"; ' ...
    '"0" "0" "0" "0"]\n']);
fprintf("Expected Output: \n\t" + ...
    "- addToGroup: 1, 3 or 4\n\t" + ...
    "- addToRow: 4 (If addToGroup: 1), 1 (If addToGroup: 3), 1 (If addToGroup: 4)\n");
disp("Actual Output:");
[addToRow, addToGroup] = joinRandomGroup(groupTable, groupCanJoin);
fprintf("\t" + ...
    "- addToGroup: %d\n\t" + ...
    "- addToRow: %d\n\n", addToGroup, addToRow);

% -= Test Functionality =- (One groupCanJoin)
groupCanJoin = [2];
groupTable = ["Name 1" "Name 2" "0" "0";
    "Name 3" "0" "0" "Name 4";
    "Name 5" "Name 7" "0" "Name 6";
    "0" "0" "0" "0"];

fprintf(['Parameter: ([1], ["Name 1" "Name 2" "0" "0"; ' ...
    '"Name 3" "0" "0" "Name 4"; ' ...
    '"Name 5" "Name 7" "0" "Name 6"; ' ...
    '"0" "0" "0" "0"])\n']);
fprintf("Expected Output: \n\t" + ...
    "- addToGroup: 2 \n\t" + ...
    "- addToRow: 2\n");
disp("Actual Output:");
[addToRow, addToGroup] = joinRandomGroup(groupTable, groupCanJoin);
fprintf("\t" + ...
    "- addToGroup: %d\n\t" + ...
    "- addToRow: %d\n\n", addToGroup, addToRow);