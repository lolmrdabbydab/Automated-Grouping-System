clear; clc;

% --- --- --- --- --- --- --- --- --- --- --- --- ---
% Due to combineMatrix has been strictly filtered in 
% Advance and the filtration has been tested in the 
% advance file development, only different types of 
% valid input will be test here.
% --- --- --- --- --- --- --- --- --- --- --- --- ---

% -= Variable =-
nameList = ["John" "Cindy" "Mike" "Ken" "Luke" "Rick" "Hans" "Tom" "Ian"];

% -= Test Case 1 =- (1 Combine Team)
groupTable = string(zeros(3, 3));
combineMatrix = ["Ian" "Hans"];
fprintf(['Parameter: (string(zeros(3, 3)), ' ...
    '["John" "Cindy" "Mike" "Ken" "Luke" "Rick" "Hans" "Tom" "Ian"], ' ...
    '["Ian" "Hans"])\n']);
fprintf(['Expected Output: A 3x3 matrix of 0s where:\n\t' ...
    '- "Ian" & "Hans" are the only two non-zero elements\n\t' ...
    '- They are in the same column\n\t' ...
    '- The fist team is added into the first column starting from the 1st row\n']);
disp("Actual Output:");
groupTable = combine1(groupTable, nameList, combineMatrix);
disp(groupTable);

% -= Test Case 2 =- (>1 Combine Team, Group Can Only Fit Maximum 1 Combine Team)
groupTable = string(zeros(3, 3));
combineMatrix = ["Ian" "Hans"; "Ken" "Luke"];
fprintf(['Parameter: (string(zeros(3, 3)), ' ...
    '["John" "Cindy" "Mike" "Ken" "Luke" "Rick" "Hans" "Tom" "Ian"], ' ...
    '["Ian" "Hans"; "Ken" "Luke"])\n']);
fprintf(['Expected Output: A 3x3 matrix of 0s where:\n\t' ...
    '- "Ian", "Hans", "Ken" & "Luke" are the only four non-zero elements\n\t' ...
    '- "Ian" & "Hans" are in the same column\n\t' ...
    '- "Ken" & "Luke" are in the same column\n\t' ...
    '- The two combine teams cannot be in the same column\n\t' ...
    '- The fist team is added into the first column starting from the 1st row\n\t' ...
    '- The column each team (except the first) is added to is random each time\n']);
disp("Actual Output:");
groupTable = combine1(groupTable, nameList, combineMatrix);
disp(groupTable);

% -= Test Case 3 =- (>1 Combine Team, Group Can Fit More Than 1 Combine Team)
groupTable = string(zeros(4, 3));
combineMatrix = ["Ian" "Hans"; "Ken" "Luke"; "Cindy" "John"];
fprintf(['Parameter: (string(zeros(3, 3)), ' ...
    '["John" "Cindy" "Mike" "Ken" "Luke" "Rick" "Hans" "Tom" "Ian"], \n' ...
    '["Ian" "Hans"; "Ken" "Luke"; "Cindy" "John"])\n']);
fprintf(['Expected Output: A 3x3 matrix of 0s where:\n\t' ...
    '- "Ian", "Hans", "Ken", "Luke", "Cindy" & "John" are the only six non-zero elements\n\t' ...
    '- "Ian" & "Hans" are in the same column\n\t' ...
    '- "Ken" & "Luke" are in the same column\n\t' ...
    '- "Cindy" & "John" are in the same column\n\t' ...
    '- Two combine teams could be in the same column and 1 combine team would be in a different column\n\t' ...
    '- The fist team is added into the first column starting from the 1st row\n\t' ...
    '- The column each team (except the first) is added to is random each time\n']);
disp("Actual Output:");
groupTable = combine1(groupTable, nameList, combineMatrix);
disp(groupTable);

% -= Test Case 4 =- (Different Length Combine Team)
groupTable = string(zeros(3, 3));
combineMatrix = ["Ian" "Hans"; "Ken" "Luke"];
combineMatrix(2, 3) = "Rick";
fprintf(['Parameter: (string(zeros(3, 3)), ' ...
    '["John" "Cindy" "Mike" "Ken" "Luke" "Rick" "Hans" "Tom" "Ian"], \n' ...
    '["Ian" "Hans" <missing>; "Ken" "Luke" "Rick"])\n']);
fprintf(['Expected Output: A 3x3 matrix of 0s where:\n\t' ...
    '- "Ian", "Hans", "Ken", "Luke" & "Rick" are the only five non-zero elements\n\t' ...
    '- "Ian" & "Hans" are in the same column\n\t' ...
    '- "Ken", "Luke" & "Rick" are in the same column\n\t' ...
    '- The two combine teams cannot be in the same column\n\t' ...
    '- The fist team is added into the first column starting from the 1st row\n\t' ...
    '- The column each team (except the first) is added to is random each time\n']);
disp("Actual Output:");
groupTable = combine1(groupTable, nameList, combineMatrix);
disp(groupTable);